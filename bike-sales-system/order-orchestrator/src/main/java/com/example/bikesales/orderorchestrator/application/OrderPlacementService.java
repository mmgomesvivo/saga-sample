package com.example.bikesales.orderorchestrator.application;

import com.example.bikesales.checkout.domain.CheckoutCommand;
import com.example.bikesales.checkout.domain.BikeOrderItem; // Already used by PlaceOrderCommand
import com.example.bikesales.orderorchestrator.domain.PlaceOrderCommand;
import com.example.bikesales.orderorchestrator.domain.OrderSummaryDto;

import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Objects;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

@Service
public class OrderPlacementService {

    private final RabbitTemplate rabbitTemplate;
    // As per RabbitMQConfiguration, checkout.processing.queue is the target for checkout commands
    private static final String CHECKOUT_PROCESSING_QUEUE = "checkout.processing.queue";


    public OrderPlacementService(RabbitTemplate rabbitTemplate) {
        this.rabbitTemplate = Objects.requireNonNull(rabbitTemplate, "RabbitTemplate cannot be null.");
    }

    public CompletableFuture<OrderSummaryDto> placeOrder(PlaceOrderCommand command) {
        Objects.requireNonNull(command, "PlaceOrderCommand cannot be null.");
        Objects.requireNonNull(command.customerId(), "CustomerId in command cannot be null.");
        Objects.requireNonNull(command.items(), "Items in command cannot be null.");
        if (command.items().isEmpty()){ // Ensure items list is not empty, PlaceOrderCommand also checks this.
            throw new IllegalArgumentException("Items in command cannot be empty.");
        }


        // Map from shared CustomerId to checkout-specific CustomerId
        // Assuming com.example.bikesales.checkout.domain.CustomerId has a constructor that takes UUID
        com.example.bikesales.checkout.domain.CustomerId checkoutDomainCustomerId =
            new com.example.bikesales.checkout.domain.CustomerId(command.customerId().id());

        // BikeOrderItem list is already in the correct format as per PlaceOrderCommand definition
        List<BikeOrderItem> bikeOrderItems = command.items(); // Already an unmodifiable list from PlaceOrderCommand

        CheckoutCommand checkoutCommand = new CheckoutCommand(checkoutDomainCustomerId, bikeOrderItems);

        try {
            // Using example's logging
            System.out.println("OrderPlacementService: Sending CheckoutCommand for Customer " +
                               checkoutCommand.customerId().id() + " to queue '" + CHECKOUT_PROCESSING_QUEUE + "'");
            
            // Send directly to the queue. Spring AMQP uses default exchange if exchange name is empty string or null.
            // For a named queue, this usually means messages go to default exchange with queue name as routing key.
            rabbitTemplate.convertAndSend(CHECKOUT_PROCESSING_QUEUE, checkoutCommand);

            // Using example's logging
            System.out.println("OrderPlacementService: CheckoutCommand sent successfully.");
            
            // Using example's tracking ID and DTO message
            String temporaryTrackingId = "ORDER_TRACK_" + UUID.randomUUID().toString().substring(0, 8);
            return CompletableFuture.completedFuture(
                new OrderSummaryDto(
                    temporaryTrackingId, // Actual OrderId is generated by CheckoutSaga
                    "CHECKOUT_INITIATED",
                    "Order received. Checkout process started. Tracking ID: " + temporaryTrackingId
                )
            );
        } catch (Exception e) {
            // Handle exceptions during RabbitMQ send
            System.err.println("OrderPlacementService: Failed to send CheckoutCommand for Customer " +
                               checkoutCommand.customerId().id() + ". Error: " + e.getMessage());
            // It's better to complete exceptionally so the controller can handle it.
            return CompletableFuture.failedFuture(
                new RuntimeException("Failed to initiate checkout process due to messaging error.", e)
            );
        }
    }
}
